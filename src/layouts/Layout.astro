---
import "../../global.css";
import Navigation from "../components/Navigation.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
Astro.response.headers.set(
  "Cache-Control",
  "public, s-maxage=60, stale-while-revalidate=30"
);
---

<html
  lang="en"
  class="bg-gradient-to-br from-background to-background2 absolute w-full"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/ScrollTrigger.min.js"
    ></script>

    <slot name="head" />
    <title>{title}</title>
  </head>
  <body class="font-space text-text min-h-screen">
    <script is:inline>
      // use a script tag or an external JS file
      document.addEventListener("DOMContentLoaded", (event) => {
        gsap.registerPlugin(ScrollTrigger);
        // gsap code here!
      });
    </script>
    <!-- Theme script -->
    <script is:inline>
      (function () {
        // detect system theme and monitor for changes
        const darkQuery = window.matchMedia("(prefers-color-scheme: dark)");
        darkQuery.addListener(function (event) {
          //@ts-ignore
          window.__setPreferredTheme(event.matches ? "dark" : "light");
        });
        try {
          setTheme(
            localStorage.getItem("theme") ||
              (darkQuery.matches ? "dark" : "light") ||
              "dark"
          );
        } catch (e) {}

        function setTheme(newTheme) {
          if (newTheme === "dark") {
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove("dark");
          }

          window.__theme = newTheme;
          window.__onThemeChange(newTheme);
        }

        window.__onThemeChange = function () {};

        window.__setPreferredTheme = function (newTheme) {
          localStorage.setItem("theme", newTheme);
          setTheme(newTheme);
        };
      })();
    </script>

    <div class="relative flex flex-col">
      <Navigation />
      <main class="flex flex-col items-center">
        <slot />

        <!-- shooting stars-->
        <div
          id="star"
          class="fixed opacity-0 top-0 right-0 shooting-star h-[2px] md:h-1 w-1 bg-gradient-to-l from-white to-transparent rounded-full -z-10"
        >
        </div>
      </main>
    </div>
    <style is:global>
      :root {
        --accent: 136, 58, 234;
        --accent-light: 224, 204, 250;
        --accent-dark: 49, 10, 101;
        --accent-gradient: linear-gradient(
          45deg,
          rgb(var(--accent)),
          rgb(var(--accent-light)) 30%,
          white 60%
        );
      }
      html {
        font-family: system-ui, sans-serif;
        background: #13151a;
      }
      code {
        font-family:
          Menlo,
          Monaco,
          Lucida Console,
          Liberation Mono,
          DejaVu Sans Mono,
          Bitstream Vera Sans Mono,
          Courier New,
          monospace;
      }
    </style>
  </body>

  <script is:inline>
    const ANGLE_DEG = 145;
    const ANGLE = ANGLE_DEG * (Math.PI / 180);
    const TRAIL_DURATION = 0.5;

    var t = gsap.timeline({
      repeat: -1,
      repeatRefresh: true,
      ease: "none",
      onRepeat: () => {
        memo_trail_length = undefined;
        memo_total_length = undefined;
      },
      //A number between 1 and 4
      delay: gsap.utils.random(3, 7),
      repeatDelay: 5,
    });

    let memo_trail_length, memo_total_length;
    const getTrailLength = () => {
      if (memo_trail_length) return memo_trail_length;

      const trail_length = gsap.utils.random(300, 700);
      const total_length = gsap.utils.random(200, 500) + trail_length;

      memo_total_length = total_length;
      memo_trail_length = trail_length;

      return trail_length;
    };

    const getTotalLength = (trail_length) => {
      if (memo_total_length) return memo_total_length;

      const total_length = gsap.utils.random(200, 500) + trail_length;

      memo_total_length = total_length;

      return total_length;
    };

    getTrailOffDuration = (trail_length, total_length) => {
      const TRAIL_SPEED = total_length / TRAIL_DURATION;

      const TRAIL_OFF_DURATION = trail_length / TRAIL_SPEED;
      return TRAIL_OFF_DURATION;
    };

    t.fromTo(
      "#star",
      {
        rotate: ANGLE_DEG,
        transformOrigin: "top right",
        opacity: 0,
        x: () => -gsap.utils.random(0, window.innerWidth / 1.2),
        y: () => gsap.utils.random(-300, window.innerHeight / 1.5),
      },
      {
        //X and y taking into acount the angle
        width: () => getTrailLength(),
        x:
          "+=" +
          parseFloat(
            (Math.cos(ANGLE) * getTotalLength(getTrailLength())).toFixed(2)
          ),
        y:
          "+=" +
          parseFloat(
            (Math.sin(ANGLE) * getTotalLength(getTrailLength())).toFixed(2)
          ),
        ease: "none",
        duration: TRAIL_DURATION,
        opacity: 1,
      }
    );

    t.to("#star", {
      width: 0,
      x:
        "+=" +
        parseFloat(
          (
            Math.cos(ANGLE) * getTrailLength() -
            Math.cos(ANGLE) * getTrailLength()
          ).toFixed(2)
        ),
      y:
        "+=" +
        parseFloat(
          (
            Math.sin(ANGLE) * getTrailLength() -
            Math.sin(ANGLE) * getTrailLength()
          ).toFixed(2)
        ),
      ease: "none",
      duration: getTrailOffDuration(getTrailLength(), getTotalLength()),
      // opacity: 0,
    });

    // t.play()
  </script>
</html>
